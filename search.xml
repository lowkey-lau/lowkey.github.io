<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-8]]></title>
      <url>/2020/11/16/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-8/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>在uniapp开发中使用nvue，如果使用了全局样式，就会报一大堆错误，类似这种</p>
</blockquote>
<p><img src="/images/subNvue/img-pack-bug.png" alt="nvue 使用全局样式引起的Bug" title="nvue使用全局样式引起的Bug"> </p>
<a id="more"></a>
<hr>
<p>出现这个问题的原因是 <code>nvue</code> 使用的编写方式是 <code>week</code>，详细的可以看 <a href="https://weex.apache.org/zh/docs/styles/common-styles.html" title="Weex" target="_blank" rel="noopener">Weex</a><br>Emm，看了挺多的别人分享的东西，可是不是很好的呈现效果，然后突然想了想可不可以用平台判断呢，然后查了下官网文档发现有 <code>#ifndef APP-NVUE</code> 这个判断，那问题就这么简单的解决了哈哈</p>
<p><img src="/images/subNvue/img-pack-bug-fixed.png" alt="Bug修复" title="Bug修复"> </p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
            <tag> subNvue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-7]]></title>
      <url>/2020/11/07/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-7/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>之前遇到一个需求，希望背景是视频的，能自动循环播放且能有声音。这时问题来了，在uni-app中视频的层级高于其他前端组件。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>关于<code>视频</code>这一块，官网也有一个非常详细的描述，看官且看<br><a href="https://uniapp.dcloud.io/component/video?id=video" title="uni-app - 视频" target="_blank" rel="noopener">uni-app - 视频</a></p>
<p>如果使用正常的布局会发现你编写的组件被视频给覆盖了，这里我使用了两种解决方式：</p>
<h3 id="1-使用cover-view"><a href="#1-使用cover-view" class="headerlink" title="1.使用cover-view"></a>1.使用cover-view</h3><p>当你的页面元素不需要很复杂且元素不多的时候，可以使用 <code>cover-view</code><br><a href="https://uniapp.dcloud.io/component/cover-view" title="uni-app - cover-view" target="_blank" rel="noopener">uni-app - cover-view</a></p>
<p>在 <code>video</code> 元素里嵌套使用，不过缺点是只能简单的支持 <code>cover-view</code> 和 <code>cover-image</code>，事件也仅支持 <code>@click</code> 的触发</p>
<h3 id="2-使用subNvue"><a href="#2-使用subNvue" class="headerlink" title="2.使用subNvue"></a>2.使用subNvue</h3><p>我是使用这个方法来实现了我的需求，它相当于一个编写一个原生子窗体覆盖在页面上，层级比视频的高<br><a href="https://uniapp.dcloud.io/collocation/frame/subNVues" title="uni-app - subNvue" target="_blank" rel="noopener">uni-app - subNvue</a></p>
<p>我的使用方法是在视频页同文件夹中添加一个nvue的文件，例如：<br><img src="/images/subNvue/img-01.png" alt><br>配置完后去 <code>pages.json</code> 把subNvue文件挂载上去通过app预览效果<br><img src="/images/subNvue/img-02.png" alt> </p>
<p>这样就完成了我们想要的效果啦，当然，它是有缺点的，<code>subNvue</code> 的写法在 <code>H5</code> 是呈现不出效果的，还有 <code>subNvue</code> 是使用 <code>Weex</code> 的编写手法，样式上有一些局限，具体的各位自行优化把<br><a href="https://weex.apache.org/zh/docs/styles/common-styles.html" title="Weex" target="_blank" rel="noopener">Weex</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
            <tag> subNvue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 使用 categories 进行多种分类]]></title>
      <url>/2020/11/07/Hexo%20%E4%BD%BF%E7%94%A8%20categories%20%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%A7%8D%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我希望写的一篇文章能够同时属于多个分类，例如我现在的这篇文章，想把它放在 <code>博客</code> 和 <code>干货</code> 的类别中。</p>
</blockquote>
<a id="more"></a>
<hr>
<p>一开始我使用的写法是</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">干货</span></span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span> <span class="string">[博客,干货]</span></span><br></pre></td></tr></table></figure>

<p>可是这样的写法会编译成 <code>博客/干货</code> 的类别中，不是我想要的效果，我的想法是想要分离成单独的一个类别，然后去看了一下官方的文档，发现了我上面的写法属于 <code>子分类</code>，还有一个 <code>多分类</code> 的写法，书写方式也很简单</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[博客]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">[干货]</span></span><br></pre></td></tr></table></figure>

<p>效果就这么实现了，另外这个也可以进行 <code>多分类</code> ， <code>子分类</code> 联合使用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">  -</span><span class="string">[博客,Vue]</span></span><br><span class="line"><span class="bullet">  -</span><span class="string">[干货]</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-6]]></title>
      <url>/2020/11/06/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-6/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>当主题风格是深色，进行页面切换时会出现白屏闪动的情况，这对用户的体验是不友好的。</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><em>如上所说</em> </p>
<p>剖析了uni-app的渲染方式，发现他的页面都有个默认的背景颜色生成，这时解决方法就出现了</p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p>找到 <code>pages.json</code> 文件，在主题色的页面结构中添加代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">	&quot;app-plus&quot;: &#123;</span><br><span class="line">		&quot;background&quot;: 主题色</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是发现这个体验感就好了很多了，当然，如果你全部页面都是同样风格的，可以在 <code>globalStyle</code> 中添加全局背景色优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;globalStyle&quot;: &#123;</span><br><span class="line">	&quot;app-plus&quot;: &#123;</span><br><span class="line">		&quot;background&quot;: 主题色</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Next 主题下图片的栅格化系统]]></title>
      <url>/2020/04/07/Next%20%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%9B%BE%E7%89%87%E7%9A%84%E6%A0%85%E6%A0%BC%E5%8C%96%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>今天学习了Next主题下的图片栅格布局系统，使用<code>{\% gp x-x \%}</code>,<code>{\% endgp \%}</code>设置图片展示效果，<code>x-x</code>部分可以参考<code>theme/next/scripts/tags/group-pictures.js</code>的注释来填写。</p>
<p>分享下我家猫猫的美照。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/cat/small.jpg" alt="小的时候" title="可爱猫"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/cat/young.jpg" alt="长大的时候" title="帅气猫"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/cat/old.jpg" alt="现在的样子" title="大肥猫"></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>



]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 从零开始]]></title>
      <url>/2019/12/18/Java%20%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<h1 id="自学ing"><a href="#自学ing" class="headerlink" title="自学ing"></a>自学ing</h1><p><code>参考资料</code><br><a href="https://www.runoob.com/java/java-basic-syntax.html" target="_blank" rel="noopener">菜鸟教程</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744" target="_blank" rel="noopener">廖雪峰老师的JAVA学习资料</a></p>
<a id="more"></a>

<hr>
<h3 id="编写-Java-程序时，应注意以下几点："><a href="#编写-Java-程序时，应注意以下几点：" class="headerlink" title="编写 Java 程序时，应注意以下几点："></a>编写 Java 程序时，应注意以下几点：</h3><p><strong>大小写敏感：</strong>Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。<br><strong>类名：</strong>对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。<br><strong>方法名：</strong>所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。<br><strong>源文件名：</strong>源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。<br><strong>主方法入口：</strong>所有的 Java 程序由 public static void main(String []args) 方法开始执行。</p>
]]></content>
      
        <categories>
            
            <category> 日志 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录个人使用SCSS的小知识]]></title>
      <url>/2019/12/06/%E8%AE%B0%E5%BD%95%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8SCSS%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我个人使用的是 Scss/Sass 的css编码手法，在工作上会经常遇到比较有价值的小知识，在这里记录下来。</p>
</blockquote>
<a id="more"></a>

<hr>
<h3 id="对-scss-变量做-calc-计算的方法"><a href="#对-scss-变量做-calc-计算的方法" class="headerlink" title="对 scss 变量做 calc 计算的方法"></a>对 <code>scss</code> 变量做 <code>calc</code> 计算的方法</h3><blockquote>
<p>在使用scss编译的时候，直接使用    <strong>calc($x + $y)</strong> ，浏览器是不能识别的。于是找了一下相关的资料，发现需要使用 <strong>#{$x}</strong> 才可以使用</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 范例</span></span><br><span class="line"><span class="variable">$x</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">width</span>: calc(#&#123;<span class="variable">$x</span>&#125; + <span class="number">100%</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>#END</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-5]]></title>
      <url>/2019/11/27/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-5/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>在使用 uni-app 开发网站时，会出现图片 ‘闪一下’ 的白色闪动效果。</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><em>如上所说</em> </p>
<p>（我是设置了image为 <code>mode=&quot;widthFix&quot;</code>），官方解释是 <strong>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢</strong> （我测试的时候图片10KB左右）</p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p>官方也针对这个问题进行了修复：设置 <code>image{will-change: transform}</code> 可优化此问题。<br><a href="https://uniapp.dcloud.io/component/image?id=image" target="_blank" rel="noopener">链接在此</a></p>
<p>可是我发现这个设置不太能解决我所遇到的问题。</p>
<p>于是自己摸索了一下，发现每次进入的时候图片会有个固定的高度，再依据 <code>mode</code> 的属性来更改图片的配置。<br>这就好办了，我在APP.vue里面设置全局 <code>image</code> 属性为 <code>height: 0</code>， 发现这个问题就这样被解决了。</p>
<blockquote>
<p>我不知道以后会不会衍生出奇怪的问题出来，但程序世界里不就是这样吗，只有不断探索，才能发现未知呀!</p>
</blockquote>
<hr>
<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-4]]></title>
      <url>/2019/09/27/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-4/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>uni-app中使用父子组件,子组件中的 <em>onLoad</em> , <em>onShow</em> 方法不执行</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><em>如上所说</em></p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p>自己研究了一下，发现子组件可以使用 Vue 的 created() 生命周期，或者通过事件通知子组件。</p>
<p><code>暂时解决方法就是子组件使用 Vue 的生命周期，可能官方以后出新规则呢~</code></p>
<hr>
<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-3]]></title>
      <url>/2019/09/19/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-3/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>在使用方法 <code>uni.getStorageSync</code> 在 <strong><em>H5</em></strong> 页面报<br><code>SyntaxError: Unexpected token Z in JSON at position 1</code> 的错误</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><em>如上所说</em></p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p>自己研究了一下代码，发现 <code>uni.getStorageSync</code> 在 <strong><em>本地存储</em></strong> 为 <strong>null</strong> 或者 <strong>单个字符串</strong> 的时候会出现这个错误，以为这个方法读取的是一个 <code>Object</code> 的格式，所以会出现这个问题。</p>
<p>我的解决方式是一开始先判定 <strong>本地存储</strong> 里有无所需的字段，如果为 <code>null</code> 、<code>underfind</code> 、<code>空值</code> 的时候使用 <code>uni.setStorage</code> 创建一个记录，再来使用。</p>
<p><code>需要注意的是定义的字段名最好不要设置为大众化的，以防相同产生Bug</code></p>
<hr>
<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-2]]></title>
      <url>/2019/09/17/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-2/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>在使用类名为 <code>header</code> 时样式不能读取</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在某次项目中，定义了某个元素 <code>class</code> 为 <code>header</code> 发现样式根本不起作用</p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p>找了找资料发现这里确实存在着一些小坑，在<a href="https://uniapp.dcloud.io/use?id=%e5%91%bd%e5%90%8d%e9%99%90%e5%88%b6" target="_blank" rel="noopener">uniapp官网</a>有记载，<strong>命名方式存在限制</strong>。</p>
<p>在 uni-app 中以下这些作为保留关键字，不可作为组件名。<br><code>a, canvas, cell, content, countdown, datepicker, div, element, embed, header, image, img, indicator, input, link, list, loading-indicator, loading, marquee, meta, refresh, richtext, script, scrollable, scroller, select, slider-neighbor, slider, slot, span, spinner, style, svg, switch, tabbar, tabheader, template, text, textarea, timepicker, trisition-group, trisition, video, view, web, Tips</code></p>
<p><em>除以上列表中的名称外，标准的 HTML 及 SVG 标签名也不能作为组件名。</em></p>
<hr>
<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 写法记录]]></title>
      <url>/2019/09/06/Markdown%20%E5%86%99%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>开始记录博客了，可Hexo编写的文章使用Markdown的写法，因此在这里记录一下Markdown的写法</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="Markdown-的创始人"><a href="#Markdown-的创始人" class="headerlink" title="Markdown 的创始人"></a>Markdown 的创始人</h2><p><img src="/images/people/Aaron_Swartz.jpg" alt="Aaron Swartz 大神照片" title="Aaron Swartz 大神照片"></p>
<!-- > Aaron Swartz 大神照片 -->
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题共有六个级别,使用 <code>#</code> 来区分层级</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<p><code>注：# 和字符之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</code></p>
<hr>
<h2 id="语义标记"><a href="#语义标记" class="headerlink" title="语义标记"></a>语义标记</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">效果</th>
<th align="center">写法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">斜体</td>
<td align="center"><em>斜体</em></td>
<td align="center"><code>*斜体* _斜体_</code></td>
</tr>
<tr>
<td align="center">粗体</td>
<td align="center"><strong>粗体</strong></td>
<td align="center"><code>**粗体**</code></td>
</tr>
<tr>
<td align="center">粗斜体</td>
<td align="center"><strong><em>粗斜体</em></strong></td>
<td align="center"><code>***粗斜体***</code></td>
</tr>
<tr>
<td align="center">栅格线</td>
<td align="center"><del>栅格线</del></td>
<td align="center"><code>~栅格线~</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="语义标签"><a href="#语义标签" class="headerlink" title="语义标签"></a>语义标签</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">效果</th>
<th align="center">写法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">斜体</td>
<td align="center"><i>斜体</i></td>
<td align="center"><code>&lt;i&gt;斜体&lt;/i&gt;</code></td>
</tr>
<tr>
<td align="center">粗体</td>
<td align="center"><b>加粗</b></td>
<td align="center"><code>&lt;b&gt;加粗&lt;/b&gt;</code></td>
</tr>
<tr>
<td align="center">强调</td>
<td align="center"><em>强调</em></td>
<td align="center"><code>&lt;em&gt;强调&lt;/em&gt;</code></td>
</tr>
<tr>
<td align="center">上标</td>
<td align="center">Z<sup>a</sup></td>
<td align="center"><code>Z&lt;sup&gt;a&lt;/sup&gt;</code></td>
</tr>
<tr>
<td align="center">下标</td>
<td align="center">Z<sub>a</sub></td>
<td align="center"><code>Z&lt;sub&gt;a&lt;/sub&gt;</code></td>
</tr>
<tr>
<td align="center">键盘文本</td>
<td align="center"><kbd>Ctrl</kbd></td>
<td align="center"><code>&lt;kbd&gt;Ctrl&lt;/kbd&gt;</code></td>
</tr>
<tr>
<td align="center">换行</td>
<td align="center"></td>
<td align="center"><code>&lt;br /&gt;</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`这是单行代码`</span><br></pre></td></tr></table></figure>

<p>显示效果为:<br><code>这是单行代码</code></p>
<br>

<h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">$(document).ready(function () &#123;</span></span><br><span class="line"><span class="code">    alert('hello world');</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示效果为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<br>

<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><blockquote>
<p>如果你只想高亮语句中的某个函数名或关键字，可以使用 <code>function_name()</code> 实现<br>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 <strong>```</strong> 包裹一段代码，并指定一种 <strong>语言</strong></p>
</blockquote>
<p>支持的语言：<code>1c, abnf, accesslog, actionscript, ada, apache, applescript, arduino, armasm, asciidoc, aspectj, autohotkey, autoit, avrasm, awk, axapta, bash, basic, bnf, brainfuck, cal, capnproto, ceylon, clean, clojure, clojure-repl, cmake, coffeescript, coq, cos, cpp, crmsh, crystal, cs, csp, css, d, dart, delphi, diff, django, dns, dockerfile, dos, dsconfig, dts, dust, ebnf, elixir, elm, erb, erlang, erlang-repl, excel, fix, flix, fortran, fsharp, gams, gauss, gcode, gherkin, glsl, go, golo, gradle, groovy, haml, handlebars, haskell, haxe, hsp, htmlbars, http, hy, inform7, ini, irpf90, java, javascript, json, julia, kotlin, lasso, ldif, leaf, less, lisp, livecodeserver, livescript, llvm, lsl, lua, makefile, markdown, mathematica, matlab, maxima, mel, mercury, mipsasm, mizar, mojolicious, monkey, moonscript, n1ql, nginx, nimrod, nix, nsis, objectivec, ocaml, openscad, oxygene, parser3, perl, pf, php, pony, powershell, processing, profile, prolog, protobuf, puppet, purebasic, python, q, qml, r, rib, roboconf, rsl, ruby, ruleslanguage, rust, scala, scheme, scilab, scss, smali, smalltalk, sml, sqf, sql, stan, stata, step21, stylus, subunit, swift, taggerscript, tap, tcl, tex, thrift, tp, twig, typescript, vala, vbnet, vbscript, vbscript-html, verilog, vhdl, vim, x86asm, xl, xml, xquery, yaml, zephir</code></p>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>可以无限制的引用下去</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 我是第一级引用</span></span><br><span class="line">&gt;&gt; 我是第二级引用</span><br><span class="line">&gt;&gt;&gt; 我是第三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; ...</span><br></pre></td></tr></table></figure>

<p>显示效果为:</p>
<blockquote>
<p>我是第一级引用</p>
<blockquote>
<p>我是第二级引用</p>
<blockquote>
<p>我是第三级引用</p>
<blockquote>
<p>…</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 <code>-</code> 、 <code>+</code> 、 <code>*</code> 书写<br>效果：</p>
<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用 <code>1.</code> 、 <code>2.</code> 、 <code>3.</code> 书写</p>
<p>效果：</p>
<ol>
<li>1 内容1</li>
<li>2 内容2</li>
<li>7 内容3(会按照序列强制编排,例如我这一行使用的是 <code>7.</code> )</li>
</ol>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>常用链接方法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">文字链接 [<span class="string">链接名称</span>](<span class="link">http://链接网址</span>)</span><br><span class="line">网址链接 &lt;http://链接网址&gt;</span><br></pre></td></tr></table></figure>

<p>高级链接技巧</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>].</span><br><span class="line">这个链接用 yahoo 作为网址变量 [<span class="string">Yahoo!</span>][<span class="symbol">yahoo</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://www.google.com/</span></span><br><span class="line">[<span class="symbol">yahoo</span>]: <span class="link">http://www.yahoo.com/</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>插入图片不需要其他按钮，你只需要使用 <strong>![](图片链接地址)</strong> 这样的语法即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![我是图片备注](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br><span class="line"></span><br><span class="line">另外发现Hexo的Next主题需要: </span><br><span class="line"> </span><br><span class="line">![我是图片备注](http://zh.mweb.im/asset/img/set-up-git.gif &quot;我是图片备注&quot;) </span><br><span class="line"></span><br><span class="line">这种写法才能显示</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong><br><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="我是图片备注" title="我是图片备注"></p>
<hr>
<h2 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[![我是图片备注](http://zh.mweb.im/asset/img/set-up-git.gif &quot;我是图片备注&quot;)](http://www.baidu.com)</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong><br><a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="我是图片备注" title="我是图片备注"></a></p>
<hr>
<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [x] 选项一</span><br><span class="line">- [ ] 选项二  </span><br><span class="line">- [ ]  [选项3]</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<ul>
<li><input checked disabled type="checkbox"> 选项一</li>
<li><input disabled type="checkbox"> 选项二  </li>
<li><input disabled type="checkbox"> [选项3]</li>
</ul>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的使用方式很简单，使用 <code>---</code> 即可生成一条分割线</p>
<p><strong>演示</strong></p>
<hr>
<h2 id="邮箱链接"><a href="#邮箱链接" class="headerlink" title="邮箱链接"></a>邮箱链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;xxx@outlook.com&gt;</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong><br><a href="mailto:&#x78;&#120;&#x78;&#64;&#x6f;&#117;&#x74;&#108;&#111;&#111;&#107;&#46;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#x78;&#120;&#x78;&#64;&#x6f;&#117;&#x74;&#108;&#111;&#111;&#107;&#46;&#x63;&#x6f;&#109;</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|    a    |       b       |      c     |</span><br><span class="line">|:-------:|:------------- | ----------:|</span><br><span class="line">|   居中  |     左对齐    |   右对齐   |</span><br><span class="line">|   1  |     1    |   1   |</span><br><span class="line">|   2  |     2    |   2   |</span><br></pre></td></tr></table></figure>

<p><strong>演示</strong></p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="left">b</th>
<th align="right">c</th>
</tr>
</thead>
<tbody><tr>
<td align="center">居中</td>
<td align="left">左对齐</td>
<td align="right">右对齐</td>
</tr>
<tr>
<td align="center">1</td>
<td align="left">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">2</td>
<td align="right">2</td>
</tr>
</tbody></table>
<blockquote>
<blockquote>
<p>我是主题设置了全局左对齐，因此可能没显示 <code>对齐</code> 效果，见谅</p>
</blockquote>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代码规范之 - BEM]]></title>
      <url>/2019/09/05/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8B%20-%20BEM/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在某公司的熏陶下，我对代码这一块看的比较重。好的书写规范便于日常的修改及维护，也便于后人的加入。</p>
</blockquote>
<a id="more"></a>


<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="什么是BEM"><a href="#什么是BEM" class="headerlink" title="什么是BEM"></a>什么是BEM</h3><blockquote>
<p><strong>BEM</strong> 是 <code>Block（块）</code>  <code>Element（元素）</code>  <code>Modifier（修饰器）</code> 的简称，是由Yandex团队提出的一种前端命名规范。 其核心思想是将页面拆分成一个个独立的富有语义的块（blocks）,从而使得团队在开发复杂的项目变得高效，并且十分有利于代码复用，即便团队引入新成员，也容易维护。   </p>
</blockquote>
<p><code>个人理解就是这个写法可以让我很快速的去更改某一个元素的样式，又不会影响全局</code></p>
<h3 id="为什么要使用代码规范"><a href="#为什么要使用代码规范" class="headerlink" title="为什么要使用代码规范"></a>为什么要使用代码规范</h3><p>我们经常在制作网页时，通常会遇到如下的CSS样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.form</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto; <span class="comment">/*写入你需要的css*/</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.form</span> <span class="selector-class">.text</span>  &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto; <span class="comment">/*写入你需要的css*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.warpper</span> <span class="selector-class">.layout</span> <span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto; <span class="comment">/*写入你需要的css*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的书写方式是我们最常见的写法，他虽然解决了单纯全局互相影响的问题，但是另外一方面也延伸出了一些问题：</p>
<ul>
<li>维护css的时候，css的作用域会对后来维护人员造成很大的困扰</li>
<li>如果出现某个共同属性，css的优先级是个头疼问题。</li>
<li>css编写的时候复用性不高，当存在多个样式一致的时候，我们可能会选择减少命名空间的方式来提升当前css的作用范围，但是可能会导致css样式冲突的问题。</li>
<li>(欢迎大家补充)</li>
</ul>
<hr>
<blockquote>
<p>想了想怎么让人更加通俗的理解意思，我们把项目比喻成 <strong>房子</strong>，嗯，就是这样~</p>
</blockquote>
<hr>
<h2 id="Block（块）"><a href="#Block（块）" class="headerlink" title="Block（块）"></a>Block（块）</h2><p>一个块是一个独立的实体，既可以是简单的也可以是复合的（包含其他块）。如果项目是一个房子，我们可以理解为块就是房子里的一个 <strong>房间</strong></p>
<p>例如我想描述的是 <strong>房子</strong> 里的 <em>房间</em> ，我可以命名为<br><code>.room</code></p>
<h2 id="Element（元素）"><a href="#Element（元素）" class="headerlink" title="Element（元素）"></a>Element（元素）</h2><p>一个元素是块的一部分，具有某种功能。元素是依赖上下文的：它们只有处于他们应该属于的块的上下文中时才是有意义的。</p>
<p>例如我想描述的是 <strong>房间</strong> 里的 <em>床</em>，我可以命名为<br><code>.room-bed</code></p>
<h2 id="Modifier（修饰器）"><a href="#Modifier（修饰器）" class="headerlink" title="Modifier（修饰器）"></a>Modifier（修饰器）</h2><p>Modifier定义block和element的外观,状态,或者行为。</p>
<p>例如我想描述的是 <strong>房间</strong> 里的 <em>床</em> 的颜色为 <strong><em>红色</em></strong>，我可以命名为<br><code>.room-bed--red</code></p>
<hr>
<blockquote>
<p>是不是这样会简单理解一点</p>
</blockquote>
<hr>
<h2 id="在-LESS、SCSS-使用-BEM"><a href="#在-LESS、SCSS-使用-BEM" class="headerlink" title="在 LESS、SCSS 使用 BEM"></a>在 LESS、SCSS 使用 BEM</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	&amp;-block&#123;</span><br><span class="line">		&amp;__title&#123;</span><br><span class="line">			&amp;--fullsize&#123;</span><br><span class="line">				<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以得出 <code>.main-block__title--fullsize: 100%</code>。<br>日常项目中，个人使用的是 <code>.block-element__element-element--modifier</code>,当然，仅供参考。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>个人推荐 <strong>Element</strong> 的添加最多不要超过3个，既  <code>.block-element__element-element</code>  差不多了，当然，看你自己。</li>
<li><strong>Class</strong> 的数量尽可能少，防止css出现优先级竞争</li>
<li>一个 <strong>Block</strong> 推荐单独抽出来书写，方便重复利用。</li>
<li>为了方便自己及他人，推荐使用 <strong>英文直译</strong> 作为元素的命名。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>在实际项目中，个人认为一个好的代码规范可以使团队的工作变得更加效率，也方便拿作品展示给他人。</li>
<li>BEM 使代码的能够有更好的可用性、可延伸性。</li>
<li>加油，你是最胖(棒)的。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 的 NextT 主题（Mist）设置图片居中]]></title>
      <url>/2019/08/29/Hexo%20%E7%9A%84%20NextT%20%E4%B8%BB%E9%A2%98%EF%BC%88Mist%EF%BC%89%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在编写博文时，使用这个主题发现插入图片默认是靠右显示的，插入小图片的时候布局非常不美观，因此在这里做一个小小的修改</p>
</blockquote>
<a id="more"></a>

<p>首先去了解了Hexo渲染的机制，发现是由主题控制的，因此找呀找，找到 <code>themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code> 这个文件，找到 <code>.posts-expand</code> 中的 <code>.post-body img { margin-left: 0; }</code>，将之修改为 <code>.post-body img { margin: 0 auto; }</code> 即可。</p>
<p>然后顺便一提不晓得是不是我设置了啥，发现原本应该会出现的图片标签/注释显示不出来，又去找了一波资料</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>找到了一个插件 <code>hexo-image-caption</code>，安装 <code>npm install --save hexo-image-caption</code> ,然后在站点设置文件末尾添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">image_caption:</span><br><span class="line">  enable: true #false to disable</span><br><span class="line">  class_name: #if you wanna customize the style for the caption,you can assign a class name, default is &apos;image-caption&apos;</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在Next官网 issue 看到了个修复方式，不需要安装插件。<br>首先需要在主题设置文件里找到 <code>Fancybox</code> 把它设置为 <code>true</code>，然后写法使用<br><code>![备注](地址 &#39;备注&#39;)</code> 即可解决，详情可以在 <a href="https://github.com/iissnan/hexo-theme-next/issues/436" target="_blank" rel="noopener">Next - issues - 436</a> 这里查看。</p>
<hr>
<p>然后就出来了效果，可是这时候样式我个人是不欣赏的，我就着手修改<br>找到 <code>themes/next/source/css/_common/components/post/post.styl</code> 这个文件，找到 <code>.image-caption</code>，修改成以下样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.image-caption &#123;</span><br><span class="line">	min-width: 20%;</span><br><span class="line">	max-width: 80%;</span><br><span class="line">	min-height: 22px;</span><br><span class="line">	display: block;</span><br><span class="line">	padding: 10px;</span><br><span class="line">	margin: 0 auto;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	color: #969696;</span><br><span class="line">	line-height: 1.7;</span><br><span class="line">	text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要个虚线的话也可以另外添加一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.image-caption:after&#123;</span><br><span class="line">	content: &apos;&apos;;</span><br><span class="line">	width 100px;</span><br><span class="line">	height 1px;</span><br><span class="line">	display: block;</span><br><span class="line">	margin: 10px auto;</span><br><span class="line">	background-color: #d9d9d9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="测试图片" title="测试图片"></p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
            <category> 干货 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用uni-app遇见的坑-1]]></title>
      <url>/2019/08/29/%E4%BD%BF%E7%94%A8Uniapp%E9%81%87%E8%A7%81%E7%9A%84%E5%9D%91-1/</url>
      <content type="html"><![CDATA[<p>在使用 uni-app 开发 webApp 的时候，总会遇见或多或小的坑</p>
<blockquote>
<p>如果一个元素根据body定位，在手机端会出现定位不准的问题</p>
</blockquote>
<a id="more"></a>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>某个元素使用 <em>position: absolute</em> 的时候，如果父级是page或者类似的元素，在手机端会出现定位不准确的问题</p>
<h2 id="解决方法（仅供参考）"><a href="#解决方法（仅供参考）" class="headerlink" title="解决方法（仅供参考）"></a>解决方法（仅供参考）</h2><p><strong>使用Uniapp特有的一个判断来实现</strong></p>
<p>可使用* #ifdef APP-PLUS * 来判定当前页面是否为手机端</p>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* <span class="comment">#ifdef APP-PLUS */</span></span><br><span class="line">top: calc(【你的原始变量】 + var(--status-bar-height));</span><br><span class="line">/* <span class="comment">#endif */</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>如果文中有什么不足或者不准确的地方，请各位大佬提出来，一起进步，谢谢！</p>
</blockquote>
<!-- ![测试图片](http://zh.mweb.im/asset/img/set-up-git.gif) -->]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webApp </tag>
            
            <tag> uni-app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从这个博客站当我的新起点吧]]></title>
      <url>/2019/08/28/%E4%BB%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E5%BD%93%E6%88%91%E7%9A%84%E6%96%B0%E8%B5%B7%E7%82%B9%E5%90%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>忙活了许多时间，终于把博客给搭建起来了。从此刻开始记录我的所思、所得、所想</p>
</blockquote>
<a id="more"></a>

<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>不知不觉在前端开发这一行业已经工作了3年多，接触过大大小小的项目，也遇到许许多多的坑。<br>以前总是想着记录自己的日常，可是总是懒懒散散，没有去记录。<br>最近项目进行的比较多，遇到的坑啊啥的也越来越多，想要重新记录下来这些错误，警示自己，分享他人。</p>
<h2 id="2019希望实现的目标"><a href="#2019希望实现的目标" class="headerlink" title="2019希望实现的目标"></a>2019希望实现的目标</h2><ul>
<li>开始考驾照（被太多人鄙视了）</li>
</ul>
<ul>
<li>开始接触后台的相关知识，尝试搭建一个小型的个人全栈</li>
</ul>
<ul>
<li>找到一个能发挥自己实力的工作，争取上流</li>
</ul>
<ul>
<li>能带我心爱的人出国旅游</li>
</ul>
<ul>
<li>带女朋友回家哈哈哈哈哈</li>
</ul>
<!-- ![测试图片](http://zh.mweb.im/asset/img/set-up-git.gif) -->]]></content>
      
        <categories>
            
            <category> 日志 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
